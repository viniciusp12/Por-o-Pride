# porao.py

from detector import DetectorMalware
from yara_scanner import YaraScanner
import os
import pathlib
import psutil
import time
import subprocess
import regex as re
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import RegistroAdd as registry
import sys # ADICIONADO: Para controlar a sa칤da do console

# --- VARI츼VEIS GLOBAIS ---
username = os.getlogin()
ult_processos = []
change_type = [0, 0, 0, 0, 0]
last_activity_time = time.time()
active_threat = False

# --- FUN칂칏ES DE MITIGA칂츾O E PROTE칂츾O ---
# ... (Todo o conte칰do anterior das fun칞칫es permanece o mesmo) ...
def encerrar_proctree():
    global ult_processos, active_threat
    if active_threat:
        return
    
    active_threat = True
    # Limpa a linha do spinner antes de imprimir a mensagem de amea칞a
    print("\n" + "游뚿 AMEA칂A DETECTADA! ACIONANDO PROTOCOLO DE MITIGA칂츾O! 游뚿")
    pids_to_kill = ""
    for pid in reversed(ult_processos):
        if psutil.pid_exists(pid) and pid != os.getpid():
            pids_to_kill += f"/PID {pid} "
    
    if pids_to_kill:
        print(f"Encerrando processos suspeitos: {pids_to_kill}")
        subprocess.run(f"taskkill {pids_to_kill}/F /T", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    ult_processos.clear()
    print("Processos encerrados. O sistema pode precisar de reinicializa칞칚o.")
    time.sleep(10)
    active_threat = False

def avaliar_heuristica():
    global change_type
    criados, modificados, movidos, deletados, honeypot = change_type
    if honeypot > 0:
        print("\nHeur칤stica: Modifica칞칚o em arquivo honeypot detectada!")
        return True
    if modificados > 30 and criados > 10:
        print("\nHeur칤stica: Alto volume de modifica칞칚o e cria칞칚o de arquivos!")
        return True
    if deletados > 50:
        print("\nHeur칤stica: Alto volume de exclus칚o de arquivos!")
        return True
    return False

def extrair_extensao(file: str):
    extensions = [".exe", ".dll", ".com", ".bat", ".vbs", ".ps1"]
    file_extension = pathlib.Path(file).suffix
    return file_extension.lower() in extensions

def start_protection():
    pass

def honeypot():
    pass

def shadow_copy():
    pass

def novos_processos():
    global ult_processos
    now = time.time()
    current_pids = []
    for process in psutil.process_iter(['pid', 'create_time']):
        if (now - process.info['create_time']) < 120:
            if process.info['pid'] not in ult_processos:
                ult_processos.append(process.info['pid'])
            current_pids.append(process.info['pid'])
    ult_processos = [pid for pid in ult_processos if pid in current_pids]

# --- CLASSE DE MONITORAMENTO ---
class MonitorFolder(FileSystemEventHandler):
    def __init__(self, yara_scanner: YaraScanner):
        self.yara_scanner = yara_scanner
        super().__init__()

    def on_any_event(self, event):
        global last_activity_time
        last_activity_time = time.time()
        if "porao" in event.src_path:
            change_type[4] += 1
        if avaliar_heuristica():
            encerrar_proctree()
    
    def on_created(self, event):
        if event.is_directory: return
        change_type[0] += 1
        if self.yara_scanner.scan_file(event.src_path):
            encerrar_proctree()
        if extrair_extensao(event.src_path):
            detector = DetectorMalware(event.src_path)
            if detector.is_malware():
                encerrar_proctree()

    def on_deleted(self, event):
        change_type[3] += 1

    def on_modified(self, event):
        if event.is_directory: return
        change_type[1] += 1
        if self.yara_scanner.scan_file(event.src_path):
            encerrar_proctree()

    def on_moved(self, event):
        change_type[2] += 1

# --- EXECU칂츾O PRINCIPAL ---
if __name__ == "__main__":
    scanner = YaraScanner()
    if scanner.rules is None:
        print("N칚o foi poss칤vel iniciar o monitoramento sem as regras YARA.")
        exit()

    home_dir = os.path.expanduser('~')
    paths_to_watch = [
        os.path.join(home_dir, 'Downloads'),
        os.path.join(home_dir, 'Documents'),
        os.path.join(home_dir, 'Desktop'),
        os.path.join(home_dir, 'Pictures'),
    ]

    event_handler = MonitorFolder(yara_scanner=scanner)
    observer = Observer()
    
    print("Iniciando monitoramento...")
    for path in paths_to_watch:
        if os.path.exists(path):
            observer.schedule(event_handler, path=path, recursive=True)
            print(f" -> Monitorando: {path}")
        else:
            print(f" -> Aviso: O diret칩rio '{path}' n칚o existe e n칚o ser치 monitorado.")

    observer.start()
    
    # ADICIONADO: L칩gica do "spinner" de atividade
    spinner_states = ['-', '\\', '|', '/']
    spinner_index = 0
    
    try:
        while True:
            # ADICIONADO: L칩gica para exibir o retorno de atividade
            spinner_char = spinner_states[spinner_index]
            # O `\r` no final faz o cursor voltar ao in칤cio da linha, escrevendo por cima
            sys.stdout.write(f"\rMonitorando ativamente... {spinner_char}")
            sys.stdout.flush() # For칞a a exibi칞칚o imediata
            spinner_index = (spinner_index + 1) % len(spinner_states)

            # MODIFICADO: Diminu칤do o tempo de espera para a anima칞칚o ficar mais fluida
            time.sleep(0.5) 
            
            novos_processos()
            
            if time.time() - last_activity_time > 15:
                change_type = [0, 0, 0, 0, 0]
                
    except KeyboardInterrupt:
        # ADICIONADO: Imprime em uma nova linha para n칚o sobrescrever a mensagem final
        print("\nMonitoramento encerrado pelo usu치rio.") 
        observer.stop()
    
    observer.join()